
package io.github.metin.dosyasifreleyici.Frame;

import io.github.metin.dosyasifreleyici.Frame.CustomComponents.FileChooser.Components.FilterOption;
import io.github.metin.dosyasifreleyici.Frame.CustomComponents.FileChooser.FilteredFileChooser;
import io.github.metin.dosyasifreleyici.Helper.AES.ECB;
import io.github.metin.dosyasifreleyici.Helper.Archive;
import io.github.metin.dosyasifreleyici.Helper.FileHelper;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.LinkOption;

// Uygulamanın ana ekranı
public class Uygulama extends JFrame {
    
    
    // Dosya seçme komponenti
    private FilteredFileChooser fileChooser;
    
    // Kurucu fonksiyon
    public Uygulama() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
        setTitle("Metin Dosya Düzenleyicisi");
        pack();
        fileChooser = new FilteredFileChooser();
        setSize(440, 423);
        initComponents();
    }

    // "Taşıma Seçenekleri" panelindeki radio buttonlarının basılabilirliğini günceller
    private void updateTasimaSecenekleriButtons() {
        String sourceString = sourceTextArea.getText();
        File file = new File(sourceString);
        boolean isDirectory = file.isDirectory();
        if (!isDirectory) {
            tumRadioButton.setSelected(true);
            tumRadioButtonActionPerformed();
        }
        tumRadioButton.setEnabled(isDirectory);
        txtRadioButton.setEnabled(isDirectory);
        pdfRadioButton.setEnabled(isDirectory);
        pngRadioButton.setEnabled(isDirectory);
    }


    // "Taşı" butonunun basılabilirliğini günceller
    private void updateTasiButton() {
        // Gerekli bütün parametreler alındıysa tasiButton'u basılabilir yapar
        boolean sonuc = 
                !sourceTextArea.getText().isEmpty() && 
                !destTextArea.getText().isEmpty() &&
                tasimaSecenekleriButtonGroup.getSelection() != null
                ;
        tasiButton.setEnabled(sonuc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tasimaSecenekleriButtonGroup = new ButtonGroup();
        jPanel1 = new JPanel();
        baslikLabel = new JLabel();
        sourceLabel = new JLabel();
        sourceScrollPane = new JScrollPane();
        sourceTextArea = new JTextArea();
        sourceSecButton = new JButton();
        destLabel = new JLabel();
        destScrollPane = new JScrollPane();
        destTextArea = new JTextArea();
        destSecButton = new JButton();
        tasimaSecenekleriPanel = new JPanel();
        tasimaSecLabel = new JLabel();
        tasimaFiller = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        tumRadioButton = new JRadioButton();
        txtRadioButton = new JRadioButton();
        pdfRadioButton = new JRadioButton();
        pngRadioButton = new JRadioButton();
        dosyaSecenekleriPanel = new JPanel();
        dosyaSecLabel = new JLabel();
        line1HFiller = new Box.Filler(new Dimension(20, 0), new Dimension(120, 0), new Dimension(20, 32767));
        line1VFiller = new Box.Filler(new Dimension(0, 10), new Dimension(0, 10), new Dimension(32767, 10));
        gizleRadioButton = new JRadioButton();
        line2HFiller = new Box.Filler(new Dimension(20, 0), new Dimension(120, 0), new Dimension(20, 32767));
        line2VFiller = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 10));
        sikistirRadioButton = new JRadioButton();
        line3HFiller = new Box.Filler(new Dimension(20, 0), new Dimension(120, 0), new Dimension(20, 32767));
        line3VFiller = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 10));
        sifreleRadioButton = new JRadioButton();
        sifreField = new JTextField();
        sifreCozRadioButton = new JRadioButton();
        line4HFiller = new Box.Filler(new Dimension(20, 0), new Dimension(120, 0), new Dimension(20, 32767));
        line4VFiller = new Box.Filler(new Dimension(0, 0), new Dimension(0, 0), new Dimension(32767, 10));
        sifreCozField = new JTextField();
        tasiButton = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        baslikLabel.setFont(new Font("Tahoma", Font.BOLD, 18)); // NOI18N
        baslikLabel.setHorizontalAlignment(SwingConstants.CENTER);
        baslikLabel.setText("Metin Dosya Düzenleyici");

        sourceLabel.setText("Taşınacak Dosya, Dizin");

        sourceScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        sourceScrollPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        sourceTextArea.setColumns(20);
        sourceTextArea.setRows(5);
        sourceTextArea.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                sourceTextAreaFocusGained();
            }
            public void focusLost(FocusEvent evt) {
                sourceTextAreaFocusLost(evt);
            }
        });
        sourceScrollPane.setViewportView(sourceTextArea);

        sourceSecButton.setText("Seç");
        sourceSecButton.setToolTipText("");
        sourceSecButton.addActionListener(evt -> sourceSecButtonActionPerformed());

        destLabel.setText("Yeni Konum");

        destScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        destScrollPane.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        destTextArea.setColumns(20);
        destTextArea.setRows(5);
        destTextArea.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                destTextAreaFocusGained();
            }
        });
        destScrollPane.setViewportView(destTextArea);

        destSecButton.setText("Seç");
        destSecButton.setToolTipText("");
        destSecButton.addActionListener(evt -> destSecButtonActionPerformed());

        tasimaSecenekleriPanel.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
        tasimaSecenekleriPanel.setPreferredSize(new Dimension(145, 200));
        tasimaSecenekleriPanel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                tasimaSecenekleriPanelMouseClicked(evt);
            }
        });
        tasimaSecenekleriPanel.setLayout(new BoxLayout(tasimaSecenekleriPanel, BoxLayout.Y_AXIS));

        tasimaSecLabel.setHorizontalAlignment(SwingConstants.CENTER);
        tasimaSecLabel.setText("Taşıma Seçenekleri");
        tasimaSecLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        tasimaSecenekleriPanel.add(tasimaSecLabel);
        tasimaSecenekleriPanel.add(tasimaFiller);

        tasimaSecenekleriButtonGroup.add(tumRadioButton);
        tumRadioButton.setSelected(true);
        tumRadioButton.setText(" Tüm Dosyalar");
        tumRadioButton.setEnabled(false);
        tumRadioButton.addActionListener(evt -> tumRadioButtonActionPerformed());
        tasimaSecenekleriPanel.add(tumRadioButton);

        tasimaSecenekleriButtonGroup.add(txtRadioButton);
        txtRadioButton.setText("Sadece .txt");
        txtRadioButton.setEnabled(false);
        txtRadioButton.addActionListener(evt -> txtRadioButtonActionPerformed());
        tasimaSecenekleriPanel.add(txtRadioButton);

        tasimaSecenekleriButtonGroup.add(pdfRadioButton);
        pdfRadioButton.setText("Sadece .pdf");
        pdfRadioButton.setEnabled(false);
        pdfRadioButton.addActionListener(evt -> pdfRadioButtonActionPerformed());
        tasimaSecenekleriPanel.add(pdfRadioButton);

        tasimaSecenekleriButtonGroup.add(pngRadioButton);
        pngRadioButton.setText("Sadece .png");
        pngRadioButton.setEnabled(false);
        pngRadioButton.addActionListener(evt -> pngRadioButtonActionPerformed());
        tasimaSecenekleriPanel.add(pngRadioButton);

        dosyaSecenekleriPanel.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
        dosyaSecenekleriPanel.setPreferredSize(new Dimension(159, 104));
        dosyaSecenekleriPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));

        dosyaSecLabel.setHorizontalAlignment(SwingConstants.CENTER);
        dosyaSecLabel.setText("Dosya Seçenekleri");
        dosyaSecenekleriPanel.add(dosyaSecLabel);
        dosyaSecenekleriPanel.add(line1HFiller);
        dosyaSecenekleriPanel.add(line1VFiller);

        gizleRadioButton.setText("Gizle");
        dosyaSecenekleriPanel.add(gizleRadioButton);
        dosyaSecenekleriPanel.add(line2HFiller);
        dosyaSecenekleriPanel.add(line2VFiller);

        sikistirRadioButton.setText("Sıkıştır (ziple)");
        dosyaSecenekleriPanel.add(sikistirRadioButton);
        dosyaSecenekleriPanel.add(line3HFiller);
        dosyaSecenekleriPanel.add(line3VFiller);

        sifreleRadioButton.setText("Şifrele:");
        sifreleRadioButton.addActionListener(this::sifreleRadioButtonActionPerformed);
        dosyaSecenekleriPanel.add(sifreleRadioButton);


        sifreField.setHorizontalAlignment(JTextField.LEFT);
        sifreField.setText("şifreniz");
        sifreField.setEnabled(false);
        sifreField.setMaximumSize(new Dimension(80, 20));
        sifreField.setMinimumSize(new Dimension(80, 20));
        sifreField.setPreferredSize(new Dimension(80, 20));
        dosyaSecenekleriPanel.add(sifreField);


        sifreCozRadioButton.setText("Ş. Çöz: ");
        dosyaSecenekleriPanel.add(sifreCozRadioButton);

        sifreCozField.setHorizontalAlignment(JTextField.LEFT);
        sifreCozField.setText("şifreniz");
        sifreCozField.setEnabled(false);
        sifreCozField.setMaximumSize(new Dimension(80, 20));
        sifreCozField.setMinimumSize(new Dimension(80, 20));
        sifreCozField.setPreferredSize(new Dimension(80, 20));
        sifreCozRadioButton.addActionListener(this::sifreCozRadioButtonActionPerformed);
        dosyaSecenekleriPanel.add(sifreCozField);

        tasiButton.setText("Taşı");
        tasiButton.setEnabled(false);
        tasiButton.addActionListener(evt -> {
            try {
                tasiButtonActionPerformed();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(baslikLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(tasimaSecenekleriPanel, GroupLayout.PREFERRED_SIZE, 159, GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(dosyaSecenekleriPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(sourceLabel, GroupLayout.PREFERRED_SIZE, 327, GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(destScrollPane, GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                                            .addComponent(sourceScrollPane)
                                            .addComponent(destLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(destSecButton, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(sourceSecButton, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 17, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tasiButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(baslikLabel, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sourceLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(sourceScrollPane, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceSecButton, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(destScrollPane, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                    .addComponent(destSecButton, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(dosyaSecenekleriPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tasimaSecenekleriPanel, GroupLayout.PREFERRED_SIZE, 144, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tasiButton, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 423, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Tum dosyalarin tasinmasi secenegi secildiginde
    private void tumRadioButtonActionPerformed() {//GEN-FIRST:event_tumRadioButtonActionPerformed
        fileChooser.setFilterOption(FilterOption.ALL);
        updateTasiButton();
    }//GEN-LAST:event_tumRadioButtonActionPerformed

    // Hedef konum butonu tıklandığında
    private void destSecButtonActionPerformed() {//GEN-FIRST:event_destSecButtonActionPerformed
        // FileChooser penceresini aç ve işlem sonucunu returnVal(Enum) değişkenine ata
        int returnVal = fileChooser.showOpenDialog(this);
        // Eğer işlem başarılı ise
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            destTextArea.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
        updateTasiButton();
    }//GEN-LAST:event_destSecButtonActionPerformed

    // Kaynak konum butonu tıklandığında
    private void sourceSecButtonActionPerformed() {//GEN-FIRST:event_sourceSecButtonActionPerformed
        // FileChooser penceresini aç ve işlem sonucunu returnVal(Enum) değişkenine ata
        int returnVal = fileChooser.showOpenDialog(this);
        // Eğer işlem başarılı ise
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            sourceTextArea.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
        updateTasiButton();
        updateTasimaSecenekleriButtons();
    }//GEN-LAST:event_sourceSecButtonActionPerformed


    // Kaynak konum alanına odaklanıldığında, bu adresin el ile yazılması durumunda çalışır
    private void sourceTextAreaFocusGained() {//GEN-FIRST:event_sourceTextAreaFocusGained
        updateTasiButton();
    }//GEN-LAST:event_sourceTextAreaFocusGained

    // Hedef konum alanına odaklanıldığında, bu adresin el ile yazılması durumunda çalışır
    private void destTextAreaFocusGained() {//GEN-FIRST:event_destTextAreaFocusGained
        updateTasiButton();
    }//GEN-LAST:event_destTextAreaFocusGained


    // Seçili klassördeki txt dosyalarının taşınması seçeneği seçildiğinde
    private void txtRadioButtonActionPerformed() {//GEN-FIRST:event_txtRadioButtonActionPerformed
        fileChooser.setFilterOption(FilterOption.ONLY_TXT);
        updateTasiButton();
    }//GEN-LAST:event_txtRadioButtonActionPerformed

    // Seçili klassördeki pdf dosyalarının taşınması seçeneği seçildiğinde
    private void pdfRadioButtonActionPerformed() {//GEN-FIRST:event_pdfRadioButtonActionPerformed
        fileChooser.setFilterOption(FilterOption.ONLY_PDF);
        updateTasiButton();
    }//GEN-LAST:event_pdfRadioButtonActionPerformed

    // Seçili klassördeki png dosyalarının taşınması seçeneği seçildiğinde
    private void pngRadioButtonActionPerformed() {//GEN-FIRST:event_pngRadioButtonActionPerformed
        fileChooser.setFilterOption(FilterOption.ONLY_PNG);
        updateTasiButton();
    }//GEN-LAST:event_pngRadioButtonActionPerformed

    // Taşı butonu tıklandığında
    private void tasiButtonActionPerformed() throws Exception {//GEN-FIRST:event_tasiButtonActionPerformed
        // Kaynak ve hedef konumlarındaki dosyaları al
        File sourceFile = new File(sourceTextArea.getText());
        File destFile = new File(destTextArea.getText());
        // Eğer kaynak konumda dosya veya klasör yoksa
        if (!sourceFile.exists()){
            JOptionPane.showMessageDialog(this, "Kaynak konumda dosya veya klasör bulunamadı.", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Eğer kaynak dosya ise
        if (sourceFile.isFile()) {
            // Dosyayi okuyacak reader nesnesini oluştur
            // Bu nesnenin tercih edilmesinin sebebi, dosyayı byte byte okuyabilmesi
            BufferedInputStream sourceReader = new BufferedInputStream(new FileInputStream(sourceFile));
            // Konum yapılandırması yapılır
            String fileDestPath = destFile.getAbsolutePath();
            if (destFile.isDirectory()) {
                fileDestPath += "\\" + sourceFile.getName();
            }
            destFile = new File(fileDestPath);
            // Dosyayı yazacak writer nesnesini oluştur
            // Bu nesnenin tercih edilmesinin sebebi, dosyayı byte byte yazabilmesi
            BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(destFile));
            // Dosyayı oku ve byte dizisine ata
            byte[] data = sourceReader.readAllBytes();
            // Eğer şifreleme seçeneği seçili ise
            if (sifreleRadioButton.isSelected()) {
                // ECB şifreleme algoritması kullanılarak dosya şifrelenir ve byte dizisine şifrelenmiş veri atanır
                data = ECB.encryptECB(data, sifreField.getText());
            }
            if (sifreCozRadioButton.isSelected()) {
                // ECB şifreleme algoritması kullanılarak dosya şifrelenir ve byte dizisine şifrelenmiş veri atanır
                data = ECB.decryptECB(data, sifreCozField.getText());
            }
            sourceFile.delete();
            writer.write(data);
            writer.close();
            sourceReader.close();
            // Eğer sıkıştırma seçeneği seçili ise
            if (sikistirRadioButton.isSelected()) {
                Archive.zipFile(fileDestPath);
                destFile.delete();
                destFile = new File(fileDestPath + ".zip");
            }

            // Eğer gizleme seçeneği seçili ise
            if (gizleRadioButton.isSelected()) {
                // Dosyanın gizli olması için dosya özelliklerine "dos:hidden" özelliği eklenir
                Files.setAttribute(destFile.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);
            }
            return;
        }

        // Eğer kaynak konumda klasör varsa
        String folderName = sourceFile.getName();
        File[] filesToMove = fileChooser.getSelectedFoldersFilteredFiles(sourceFile);
        tasiButton.setText("Taşınıyor...");
        File destFolder = new File(destFile.getAbsolutePath() + "\\" + folderName);
        destFolder.mkdirs();
        FileInputStream sourceReader;
        FileOutputStream writer;
        for (File file : filesToMove) {
            sourceReader = new FileInputStream(file);
            String fileDestPath = destFolder.getAbsolutePath() + "\\" + file.getName();
            writer = new FileOutputStream(fileDestPath);
            byte[] data = sourceReader.readAllBytes();
            if (sifreleRadioButton.isSelected()) {
                data = ECB.encryptECB(data, sifreField.getText());
            }
            writer.write(data);
            writer.close();
            sourceReader.close();
            file.delete();
        }

        // Eğer sıkıştırma seçeneği seçili ise
        if (sikistirRadioButton.isSelected()) {
            tasiButton.setText("Sıkıştırılıyor...");
            Archive.zipFile(destFolder.getAbsolutePath());
            FileHelper.deleteFolder(destFolder);
            destFolder = new File(destFolder.getAbsolutePath() + ".zip");
        }

        // Eğer gizleme seçeneği seçili ise
        if (gizleRadioButton.isSelected()) {
            tasiButton.setText("Gizleniyor...");
            // Klasörün gizli olması için dosya özelliklerine "dos:hidden" özelliği eklenir
            Files.setAttribute(destFolder.toPath(), "dos:hidden", true, LinkOption.NOFOLLOW_LINKS);
        }

        tasiButton.setText("Taşı");


    }//GEN-LAST:event_tasiButtonActionPerformed

    // Şifre textField'ına odaklanıldığında, placeholder'ı temizler
    private void sifreleRadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sifreleRadioButtonActionPerformed
        boolean isEnabled = sifreleRadioButton.isSelected();
        sifreField.setEnabled(isEnabled);
        if (isEnabled) {
            sifrePlaceholderClear(sifreField);
        } else {
            sifreCozRadioButton.setSelected(false);
            sifrePlaceholderSet(sifreField);
        }

    }//GEN-LAST:event_sifreCozRadioButtonActionPerformed
    private void sifreCozRadioButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sifreleRadioButtonActionPerformed)
        boolean isEnabled = sifreCozRadioButton.isSelected();
        sifreCozField.setEnabled(isEnabled);
        if (isEnabled) {
            sifrePlaceholderClear(sifreCozField);
        } else {
            sifreCozRadioButton.setSelected(false);
            sifrePlaceholderSet(sifreCozField);
        }

    }//GEN-LAST:event_sifreleRadioButtonActionPerformed

    // Taşıma seçenekleri paneline tıklandığında radio button'ların seçimini günceller
    private void tasimaSecenekleriPanelMouseClicked(MouseEvent evt) {//GEN-FIRST:event_tasimaSecenekleriPanelMouseClicked
        updateTasimaSecenekleriButtons();
    }//GEN-LAST:event_tasimaSecenekleriPanelMouseClicked

    // Kaynak konum alanından odak alındığında, taşıma seçeneklerini günceller
    private void sourceTextAreaFocusLost(FocusEvent evt) {//GEN-FIRST:event_sourceTextAreaFocusLost
        updateTasimaSecenekleriButtons();
    }//GEN-LAST:event_sourceTextAreaFocusLost

    // Placeholder'ı temizler
    private void sifrePlaceholderClear(JTextField field) {
        if (field.getText().equals("şifreniz")) field.setText("");
    }

    // Placeholder'ı ayarlar
    private void sifrePlaceholderSet(JTextField field) {
        if (field.getText().isEmpty()) field.setText("şifreniz");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel baslikLabel;
    private JLabel destLabel;
    private JScrollPane destScrollPane;
    private JButton destSecButton;
    public JTextArea destTextArea;
    private JLabel dosyaSecLabel;
    private JPanel dosyaSecenekleriPanel;
    public JRadioButton gizleRadioButton;
    private JPanel jPanel1;
    private Box.Filler line1HFiller;
    private Box.Filler line1VFiller;
    private Box.Filler line2HFiller;
    private Box.Filler line2VFiller;
    private Box.Filler line3HFiller;
    private Box.Filler line3VFiller;
    private Box.Filler line4HFiller;
    private Box.Filler line4VFiller;
    public JRadioButton pdfRadioButton;
    public JRadioButton pngRadioButton;
    public JTextField sifreField;
    public JTextField sifreCozField;
    public JRadioButton sifreleRadioButton;
    public JRadioButton sikistirRadioButton;
    private JLabel sourceLabel;
    private JScrollPane sourceScrollPane;
    private JButton sourceSecButton;
    public JTextArea sourceTextArea;
    private JButton tasiButton;
    private Box.Filler tasimaFiller;
    private JLabel tasimaSecLabel;
    private ButtonGroup tasimaSecenekleriButtonGroup;
    private JPanel tasimaSecenekleriPanel;
    public JRadioButton tumRadioButton;
    public JRadioButton txtRadioButton;
    public JRadioButton sifreCozRadioButton;


    // End of variables declaration//GEN-END:variables
}
